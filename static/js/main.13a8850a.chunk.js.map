{"version":3,"sources":["reducer.js","Context.js","UserInput.js","Visualization.js","App.js","index.js"],"names":["reducer","state","action","type","payload","html","css","console","log","isVisualizationOn","err","alert","AppContext","React","createContext","initialState","AppProvider","children","useReducer","dispatch","codeInterval","useRef","outputInterval","i","useEffect","endingBodyTag","search","code","slice","codeContainer","document","getElementById","codeOutput","current","setInterval","append","scrollTop","scrollHeight","length","clearInterval","writer","codeVal","innerHTML","updater","value","Provider","handleChange","string","id","startVisualization","useGlobalContext","useContext","UserInput","className","onChange","e","target","placeholder","onClick","Visualization","readOnly","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.13a8850a.chunk.js","sourcesContent":["const reducer = (state, action) => {\r\n  try {\r\n    if (action.type === \"UPDATE_STATE\") {\r\n      if (action.payload[1] === \"html-textarea\") {\r\n        return { ...state, html: action.payload[0] };\r\n      }\r\n      ///\r\n      if (action.payload[1] === \"css-textarea\") {\r\n        return { ...state, css: action.payload[0] };\r\n      }\r\n    }\r\n    ///\r\n    if (action.type === \"START_VISUALIZING\") {\r\n      console.log(\"start visualizing\");\r\n\r\n      return { ...state, isVisualizationOn: !state.isVisualizationOn };\r\n    }\r\n\r\n    return { ...state };\r\n  } catch (err) {\r\n    alert(\"Sorry, I couldn't process it. Check your HTML or CSS\");\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React, { useContext, useEffect, useReducer, useRef } from \"react\";\r\nimport reducer from \"./reducer\";\r\nimport sanitizeHtml from \"sanitize-html\";\r\n\r\nconst AppContext = React.createContext();\r\n//Provider, Consumer\r\n\r\nconst initialState = {\r\n  html: \"\",\r\n  css: \"\",\r\n  isVisualizationOn: false,\r\n};\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  let codeInterval = useRef(null);\r\n  let outputInterval = useRef(null);\r\n\r\n  let i = 0;\r\n  const writer = (code, codeContainer) => {\r\n    codeContainer.append(code[i]);\r\n    codeContainer.scrollTop = codeContainer.scrollHeight;\r\n    i++;\r\n    if (i === code.length) {\r\n      clearInterval(codeInterval.current);\r\n      codeInterval.current = null;\r\n      return;\r\n    }\r\n  };\r\n\r\n  const updater = (codeVal, codeOutput) => {\r\n    // codeOutput.setAttribute(\"dangerouslySetInnerHTML\", {\r\n    //   _html: { sanitized },\r\n    // });\r\n\r\n    // let sanitized = sanitizeHtml(codeVal);\r\n\r\n    codeOutput.innerHTML = codeVal;\r\n    codeOutput.scrollTop = codeOutput.scrollHeight;\r\n\r\n    if (codeInterval.current === null)\r\n      return clearInterval(outputInterval.current);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (state.isVisualizationOn) {\r\n      let html = `${state.html}`;\r\n      const endingBodyTag = html.search(\"</body>\");\r\n      let css = `\\n<style>\\n${state.css}\\n</style>\\n`;\r\n      let code = css\r\n        ? html.slice(0, endingBodyTag) + css + html.slice(endingBodyTag)\r\n        : html;\r\n\r\n      let codeContainer = document.getElementById(\"code-container\");\r\n      let codeOutput = document.getElementById(\"code-output\");\r\n      codeInterval.current = setInterval(() => {\r\n        writer(code, codeContainer);\r\n      }, 200);\r\n\r\n      outputInterval.current = setInterval(() => {\r\n        updater(codeContainer.value, codeOutput);\r\n      }, 400);\r\n\r\n      return () => {\r\n        clearInterval(codeInterval.current);\r\n        clearInterval(outputInterval.current);\r\n      };\r\n    }\r\n  }, [state.isVisualizationOn]);\r\n\r\n  const handleChange = (string, id) => {\r\n    dispatch({ type: \"UPDATE_STATE\", payload: [string, id] });\r\n  };\r\n\r\n  const startVisualization = () => {\r\n    dispatch({ type: \"START_VISUALIZING\" });\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider value={{ ...state, handleChange, startVisualization }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"./Context\";\r\n\r\nconst UserInput = () => {\r\n  const { handleChange, startVisualization } = useGlobalContext();\r\n  return (\r\n    <div id=\"userinput\">\r\n      {/* html input */}\r\n      <div id=\"html-input-component\" className=\"input-component\">\r\n        <textarea\r\n          id=\"html-textarea\"\r\n          className=\"html-textarea textarea\"\r\n          onChange={(e) => handleChange(e.target.value, e.target.id)}\r\n          placeholder=\"Write your HTML here. Make Sure it's in correct format.\"\r\n        ></textarea>\r\n      </div>\r\n      {/* css input */}\r\n      <div id=\"css-input-component\" className=\"input-component\">\r\n        <textarea\r\n          id=\"css-textarea\"\r\n          className=\"css-textarea textarea\"\r\n          onChange={(e) => handleChange(e.target.value, e.target.id)}\r\n          placeholder=\"Write your CSS here. Make Sure it's in correct format.\"\r\n        ></textarea>\r\n      </div>\r\n      <button id=\"submit-btn\" onClick={startVisualization}>\r\n        {\" \"}\r\n        Start Visualization{\" \"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserInput;\r\n","import React from \"react\";\r\n// import { useGlobalContext } from \"./Context\";\r\n\r\nconst Visualization = () => {\r\n  // const { isVisualizationOn, increase, decrease } = useGlobalContext();\r\n  return (\r\n    <div id=\"visualization\">\r\n      <textarea id=\"code-container\" readOnly></textarea>\r\n      <div id=\"code-output\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Visualization;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"./Context\";\r\n\r\nimport UserInput from \"./UserInput\";\r\nimport Visualization from \"./Visualization\";\r\nexport default function App() {\r\n  const { isVisualizationOn } = useGlobalContext();\r\n\r\n  if (!isVisualizationOn) return <UserInput />;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <UserInput /> */}\r\n      <Visualization />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { AppProvider } from \"./Context\";\nimport \"./style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}